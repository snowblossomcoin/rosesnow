openapi: 3.0.2
info:
  title: Rosetta
  description: |
    Build Once. Integrate Your Blockchain Everywhere.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.4.5
servers:
- url: /
paths:
  /network/list:
    post:
      tags:
      - Network
      summary: Get List of Available Networks
      description: |
        This endpoint returns a list of NetworkIdentifiers that the Rosetta
        server supports.
      operationId: networkList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataRequest'
        required: true
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkListResponse'
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-contentType: application/json
      x-accepts: application/json
  /network/status:
    post:
      tags:
      - Network
      summary: Get Network Status
      description: |
        This endpoint returns the current status of the network requested. Any
        NetworkIdentifier returned by /network/list should be accessible here.
      operationId: networkStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NetworkRequest'
        required: true
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkStatusResponse'
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-contentType: application/json
      x-accepts: application/json
  /network/options:
    post:
      tags:
      - Network
      summary: Get Network Options
      description: |
        This endpoint returns the version information and allowed
        network-specific types for a NetworkIdentifier. Any
        NetworkIdentifier returned by /network/list should be accessible here.

        Because options are retrievable in the context of a NetworkIdentifier,
        it is possible to define unique options for each network.
      operationId: networkOptions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NetworkRequest'
        required: true
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkOptionsResponse'
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-contentType: application/json
      x-accepts: application/json
  /block:
    post:
      tags:
      - Block
      summary: Get a Block
      description: |
        Get a block by its Block Identifier. If transactions are returned in
        the same call to the node as fetching the block, the response should
        include these transactions in the Block object. If not, an array of
        Transaction Identifiers should be returned so /block/transaction
        fetches can be done to get all transaction information.

        When requesting a block by the hash component of the BlockIdentifier,
        this request MUST be idempotent: repeated invocations for the same
        hash-identified block must return the exact same block contents.

        No such restriction is imposed when requesting a block by height,
        given that a chain reorg event might cause the specific block at
        height `n` to be set to a different one.
      operationId: block
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockRequest'
        required: true
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockResponse'
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-contentType: application/json
      x-accepts: application/json
  /block/transaction:
    post:
      tags:
      - Block
      summary: Get a Block Transaction
      description: "Get a transaction in a block by its Transaction Identifier. This\
        \ endpoint\nshould only be used when querying a node for a block does not\
        \ return all\ntransactions contained within it.\n\nAll transactions returned\
        \ by this endpoint must be appended to any\ntransactions returned by the /block\
        \ method by consumers of this data.\nFetching a transaction by hash is considered\
        \ an Explorer Method\n(which is classified under the Future Work section).\n\
        \nThis method can be used to let consumers to paginate results when the \n\
        block trasactions count is too big to be returned in a single BlockResponse.\n\
        \nCalling this endpoint requires reference to a BlockIdentifier because\n\
        transaction parsing can change depending on which block contains the\ntransaction.\
        \ For example, in Bitcoin it is necessary to know which block\ncontains a\
        \ transaction to determine the destination of fee payments.\nWithout specifying\
        \ a block identifier, the node\nwould have to infer which block to use (which\
        \ could change during a re-org).\n\nImplementations that require fetching\
        \ previous transactions to populate\nthe response (ex: Previous UTXOs in Bitcoin)\
        \ may find it useful to run a\ncache within the Rosetta server in the /data\
        \ directory\n(on a path that does not conflict with the node).\n"
      operationId: blockTransaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockTransactionRequest'
        required: true
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockTransactionResponse'
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-contentType: application/json
      x-accepts: application/json
  /mempool:
    post:
      tags:
      - Mempool
      summary: Get All Mempool Transactions
      description: Get all Transaction Identifiers in the mempool
      operationId: mempool
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NetworkRequest'
        required: true
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MempoolResponse'
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-contentType: application/json
      x-accepts: application/json
  /mempool/transaction:
    post:
      tags:
      - Mempool
      summary: Get a Mempool Transaction
      description: |
        Get a transaction in the mempool by its Transaction Identifier. This is
        a separate request than fetching a block transaction (/block/transaction)
        because some blockchain nodes need to know that a transaction query is
        for something in the mempool instead of a transaction in a block.

        Transactions may not be fully parsable until they are in a block (ex: may
        not be possible to determine the fee to pay before a transaction is
        executed). On this endpoint, it is ok that returned transactions are
        only estimates of what may actually be included in a block.
      operationId: mempoolTransaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MempoolTransactionRequest'
        required: true
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MempoolTransactionResponse'
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-contentType: application/json
      x-accepts: application/json
  /account/balance:
    post:
      tags:
      - Account
      summary: Get an Account Balance
      description: |
        Get an array of all AccountBalances for an AccountIdentifier and the
        BlockIdentifier at which the balance lookup was performed. The BlockIdentifier
        must always be returned because some consumers of account balance data need
        to know specifically at which block the balance was calculated to
        compare balances they compute from operations with the balance returned
        by the node.

        It is important to note that making a balance request for an account
        without populating the SubAccountIdentifier should not result in the
        balance of all possible SubAccountIdentifiers being returned. Rather,
        it should result in the balance pertaining to no SubAccountIdentifiers
        being returned (sometimes called the liquid balance). To get all
        balances associated with an account, it may be necessary to
        perform multiple balance requests with unique AccountIdentifiers.

        It is also possible to perform a historical balance lookup (if the server
        supports it) by passing in an optional BlockIdentifier.
      operationId: accountBalance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountBalanceRequest'
        required: true
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountBalanceResponse'
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-contentType: application/json
      x-accepts: application/json
  /construction/derive:
    post:
      tags:
      - Construction
      summary: Derive an AccountIdentifier from a PublicKey
      description: |
        Derive returns the AccountIdentifier associated with a public key.

        Blockchains that require an on-chain action to create an
        account should not implement this method.
      operationId: constructionDerive
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConstructionDeriveRequest'
        required: true
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConstructionDeriveResponse'
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-contentType: application/json
      x-accepts: application/json
  /construction/preprocess:
    post:
      tags:
      - Construction
      summary: Create a Request to Fetch Metadata
      description: |
        Preprocess is called prior to `/construction/payloads` to construct a
        request for any metadata that is needed for transaction construction
        given (i.e. account nonce).

        The `options` object returned from this endpoint will be sent to the `/construction/metadata`
        endpoint UNMODIFIED by the caller (in an offline execution environment). If
        your Construction API implementation has configuration options, they MUST
        be specified in the `/construction/preprocess` request (in the `metadata`
        field).
      operationId: constructionPreprocess
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConstructionPreprocessRequest'
        required: true
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConstructionPreprocessResponse'
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-contentType: application/json
      x-accepts: application/json
  /construction/metadata:
    post:
      tags:
      - Construction
      summary: Get Metadata for Transaction Construction
      description: |
        Get any information required to construct a transaction for a specific
        network. Metadata returned here could be a recent hash to use, an
        account sequence number, or even arbitrary chain state. The request
        used when calling this endpoint is created by calling `/construction/preprocess`
        in an offline environment.

        You should NEVER assume that the request sent to this endpoint will be
        created by the caller or populated with any custom parameters. This must
        occur in `/construction/preprocess`.

        It is important to clarify that this endpoint should not pre-construct
        any transactions for the client (this should happen in `/construction/payloads`).
        This endpoint is left purposely unstructured because of the wide scope
        of metadata that could be required.
      operationId: constructionMetadata
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConstructionMetadataRequest'
        required: true
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConstructionMetadataResponse'
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-contentType: application/json
      x-accepts: application/json
  /construction/payloads:
    post:
      tags:
      - Construction
      summary: Generate an Unsigned Transaction and Signing Payloads
      description: |
        Payloads is called with an array of operations
        and the response from `/construction/metadata`. It returns an
        unsigned transaction blob and a collection of payloads that must
        be signed by particular AccountIdentifiers using a certain SignatureType.

        The array of operations provided in transaction construction often times
        can not specify all "effects" of a transaction (consider invoked transactions
        in Ethereum). However, they can deterministically specify the "intent"
        of the transaction, which is sufficient for construction. For this reason,
        parsing the corresponding transaction in the Data API (when it lands on chain)
        will contain a superset of whatever operations were provided during construction.
      operationId: constructionPayloads
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConstructionPayloadsRequest'
        required: true
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConstructionPayloadsResponse'
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-contentType: application/json
      x-accepts: application/json
  /construction/combine:
    post:
      tags:
      - Construction
      summary: Create Network Transaction from Signatures
      description: |
        Combine creates a network-specific transaction from an unsigned
        transaction and an array of provided signatures.

        The signed transaction returned from this method will be sent to the
        `/construction/submit` endpoint by the caller.
      operationId: constructionCombine
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConstructionCombineRequest'
        required: true
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConstructionCombineResponse'
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-contentType: application/json
      x-accepts: application/json
  /construction/parse:
    post:
      tags:
      - Construction
      summary: Parse a Transaction
      description: "Parse is called on both unsigned and signed transactions to\n\
        understand the intent of the formulated transaction.\n\nThis is run as a sanity\
        \ check before signing (after `/construction/payloads`)\nand before broadcast\
        \ (after `/construction/combine`). \n"
      operationId: constructionParse
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConstructionParseRequest'
        required: true
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConstructionParseResponse'
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-contentType: application/json
      x-accepts: application/json
  /construction/hash:
    post:
      tags:
      - Construction
      summary: Get the Hash of a Signed Transaction
      description: |
        TransactionHash returns the network-specific transaction hash for
        a signed transaction.
      operationId: constructionHash
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConstructionHashRequest'
        required: true
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionIdentifierResponse'
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-contentType: application/json
      x-accepts: application/json
  /construction/submit:
    post:
      tags:
      - Construction
      summary: Submit a Signed Transaction
      description: |
        Submit a pre-signed transaction to the node. This call should not block
        on the transaction being included in a block. Rather, it should return
        immediately with an indication of whether or not the transaction was
        included in the mempool.

        The transaction submission response should only return a 200 status
        if the submitted transaction could be included in the mempool.
        Otherwise, it should return an error.
      operationId: constructionSubmit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConstructionSubmitRequest'
        required: true
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionIdentifierResponse'
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-contentType: application/json
      x-accepts: application/json
  /call:
    post:
      tags:
      - Call
      summary: Make a Network-Specific Procedure Call
      description: |
        Call invokes an arbitrary, network-specific procedure call with network-specific
        parameters. The guidance for what this endpoint should or could do is
        purposely left vague. In Ethereum, this could be used to invoke `eth_call`
        to implement an entire Rosetta API interface for some smart contract that
        is not parsed by the implementation creator (like a DEX). This endpoint
        could also be used to provide access to data that does not map
        to any Rosetta models instead of requiring an integrator to use some
        network-specific SDK and call some network-specific endpoint (like surfacing
        staking parameters).

        Call is NOT a replacement for implementing Rosetta API endpoints or mapping
        network-specific data to Rosetta models. Rather, it enables developers to build
        additional Rosetta API interfaces for things they care about without introducing
        complexity into a base-level Rosetta implementation. Simply put, imagine
        that the average integrator will use layered Rosetta API implementations
        that each surfaces unique data.
      operationId: call
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CallRequest'
        required: true
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallResponse'
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-contentType: application/json
      x-accepts: application/json
components:
  schemas:
    NetworkIdentifier:
      $ref: ./models/NetworkIdentifier.yaml
    SubNetworkIdentifier:
      $ref: ./models/SubNetworkIdentifier.yaml
    BlockIdentifier:
      $ref: ./models/BlockIdentifier.yaml
    PartialBlockIdentifier:
      $ref: ./models/PartialBlockIdentifier.yaml
    TransactionIdentifier:
      $ref: ./models/TransactionIdentifier.yaml
    OperationIdentifier:
      $ref: ./models/OperationIdentifier.yaml
    AccountIdentifier:
      $ref: ./models/AccountIdentifier.yaml
    SubAccountIdentifier:
      $ref: ./models/SubAccountIdentifier.yaml
    Block:
      $ref: ./models/Block.yaml
    Transaction:
      $ref: ./models/Transaction.yaml
    Operation:
      $ref: ./models/Operation.yaml
    Amount:
      $ref: ./models/Amount.yaml
    Currency:
      $ref: ./models/Currency.yaml
    SyncStatus:
      $ref: ./models/SyncStatus.yaml
    Peer:
      $ref: ./models/Peer.yaml
    Version:
      $ref: ./models/Version.yaml
    Allow:
      $ref: ./models/Allow.yaml
    OperationStatus:
      $ref: ./models/OperationStatus.yaml
    Timestamp:
      $ref: ./models/Timestamp.yaml
    PublicKey:
      $ref: ./models/PublicKey.yaml
    CurveType:
      $ref: ./models/CurveType.yaml
    SigningPayload:
      $ref: ./models/SigningPayload.yaml
    Signature:
      $ref: ./models/Signature.yaml
    SignatureType:
      $ref: ./models/SignatureType.yaml
    CoinAction:
      $ref: ./models/CoinAction.yaml
    CoinIdentifier:
      $ref: ./models/CoinIdentifier.yaml
    CoinChange:
      $ref: ./models/CoinChange.yaml
    Coin:
      $ref: ./models/Coin.yaml
    BalanceExemption:
      $ref: ./models/BalanceExemption.yaml
    ExemptionType:
      $ref: ./models/ExemptionType.yaml
    AccountBalanceRequest:
      required:
      - account_identifier
      - network_identifier
      type: object
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        account_identifier:
          $ref: '#/components/schemas/AccountIdentifier'
        block_identifier:
          $ref: '#/components/schemas/PartialBlockIdentifier'
      description: |
        An AccountBalanceRequest is utilized to make a balance request
        on the /account/balance endpoint. If the block_identifier is populated,
        a historical balance query should be performed.
    AccountBalanceResponse:
      required:
      - balances
      - block_identifier
      type: object
      properties:
        block_identifier:
          $ref: '#/components/schemas/BlockIdentifier'
        balances:
          type: array
          description: |
            A single account may have a balance in multiple currencies.
          items:
            $ref: '#/components/schemas/Amount'
        coins:
          type: array
          description: |
            If a blockchain is UTXO-based, all unspent Coins owned by an account_identifier
            should be returned alongside the balance. It is highly recommended to
            populate this field so that users of the Rosetta API implementation
            don't need to maintain their own indexer to track their UTXOs.
          items:
            $ref: '#/components/schemas/Coin'
        metadata:
          type: object
          description: |
            Account-based blockchains that utilize a nonce or sequence number
            should include that number in the metadata. This number could be
            unique to the identifier or global across the account address.
          example:
            sequence_number: 23
      description: |
        An AccountBalanceResponse is returned on the /account/balance endpoint.
        If an account has a balance for each AccountIdentifier describing it
        (ex: an ERC-20 token balance on a few smart contracts), an account
        balance request must be made with each AccountIdentifier.
      example:
        balances:
        - '{}'
        - '{}'
        metadata:
          sequence_number: 23
        coins:
        - '{}'
        - '{}'
        block_identifier: '{}'
    BlockRequest:
      required:
      - block_identifier
      - network_identifier
      type: object
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        block_identifier:
          $ref: '#/components/schemas/PartialBlockIdentifier'
      description: |
        A BlockRequest is utilized to make a block request on the
        /block endpoint.
    BlockResponse:
      type: object
      properties:
        block:
          $ref: '#/components/schemas/Block'
        other_transactions:
          type: array
          description: |
            Some blockchains may require additional transactions to be fetched
            that weren't returned in the block response
            (ex: block only returns transaction hashes). For blockchains with a
            lot of transactions in each block, this
            can be very useful as consumers can concurrently fetch all
            transactions returned.
          items:
            $ref: '#/components/schemas/TransactionIdentifier'
      description: |
        A BlockResponse includes a fully-populated block or a partially-populated
        block with a list of other transactions to fetch (other_transactions).

        As a result of the consensus algorithm of some blockchains, blocks
        can be omitted (i.e. certain block indexes can be skipped). If a query
        for one of these omitted indexes is made, the response should not include
        a `Block` object.

        It is VERY important to note that blocks MUST still form a canonical,
        connected chain of blocks where each block has a unique index. In other words,
        the `PartialBlockIdentifier` of a block after an omitted block should
        reference the last non-omitted block.
      example:
        block: '{}'
        other_transactions:
        - '{}'
        - '{}'
    BlockTransactionRequest:
      required:
      - block_identifier
      - network_identifier
      - transaction_identifier
      type: object
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        block_identifier:
          $ref: '#/components/schemas/BlockIdentifier'
        transaction_identifier:
          $ref: '#/components/schemas/TransactionIdentifier'
      description: |
        A BlockTransactionRequest is used to fetch a Transaction included in a
        block that is not returned in a BlockResponse.
    BlockTransactionResponse:
      required:
      - transaction
      type: object
      properties:
        transaction:
          $ref: '#/components/schemas/Transaction'
      description: |
        A BlockTransactionResponse contains information about a block transaction.
      example:
        transaction: '{}'
    MempoolResponse:
      required:
      - transaction_identifiers
      type: object
      properties:
        transaction_identifiers:
          type: array
          items:
            $ref: '#/components/schemas/TransactionIdentifier'
      description: |
        A MempoolResponse contains all transaction identifiers in the mempool
        for a particular network_identifier.
      example:
        transaction_identifiers:
        - '{}'
        - '{}'
    MempoolTransactionRequest:
      required:
      - network_identifier
      - transaction_identifier
      type: object
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        transaction_identifier:
          $ref: '#/components/schemas/TransactionIdentifier'
      description: |
        A MempoolTransactionRequest is utilized to retrieve a transaction
        from the mempool.
    MempoolTransactionResponse:
      required:
      - transaction
      type: object
      properties:
        transaction:
          $ref: '#/components/schemas/Transaction'
        metadata:
          type: object
          example:
            descendant_fees: 123923
            ancestor_count: 2
      description: |
        A MempoolTransactionResponse contains an estimate of a mempool
        transaction. It may not be possible to know the full impact of
        a transaction in the mempool (ex: fee paid).
      example:
        metadata:
          descendant_fees: 123923
          ancestor_count: 2
        transaction: '{}'
    MetadataRequest:
      type: object
      properties:
        metadata:
          type: object
      description: |
        A MetadataRequest is utilized in any request where
        the only argument is optional metadata.
    NetworkListResponse:
      required:
      - network_identifiers
      type: object
      properties:
        network_identifiers:
          type: array
          items:
            $ref: '#/components/schemas/NetworkIdentifier'
      description: |
        A NetworkListResponse contains all NetworkIdentifiers
        that the node can serve information for.
      example:
        network_identifiers:
        - '{}'
        - '{}'
    NetworkRequest:
      required:
      - network_identifier
      type: object
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        metadata:
          type: object
      description: |
        A NetworkRequest is utilized to retrieve some data specific exclusively
        to a NetworkIdentifier.
    NetworkStatusResponse:
      required:
      - current_block_identifier
      - current_block_timestamp
      - genesis_block_identifier
      - peers
      type: object
      properties:
        current_block_identifier:
          $ref: '#/components/schemas/BlockIdentifier'
        current_block_timestamp:
          $ref: '#/components/schemas/Timestamp'
        genesis_block_identifier:
          $ref: '#/components/schemas/BlockIdentifier'
        oldest_block_identifier:
          $ref: '#/components/schemas/BlockIdentifier'
        sync_status:
          $ref: '#/components/schemas/SyncStatus'
        peers:
          type: array
          items:
            $ref: '#/components/schemas/Peer'
      description: |
        NetworkStatusResponse contains basic information about the node's
        view of a blockchain network. It is assumed that any BlockIdentifier.Index
        less than or equal to CurrentBlockIdentifier.Index can be queried.

        If a Rosetta implementation prunes historical state, it should
        populate the optional `oldest_block_identifier` field with the
        oldest block available to query. If this is not populated,
        it is assumed that the `genesis_block_identifier` is the oldest
        queryable block.

        If a Rosetta implementation performs some pre-sync before it is
        possible to query blocks, sync_status should be populated so that
        clients can still monitor healthiness. Without this field, it may
        appear that the implementation is stuck syncing and needs to be
        terminated.
      example:
        oldest_block_identifier: null
        current_block_identifier: '{}'
        peers:
        - '{}'
        - '{}'
        sync_status: '{}'
        current_block_timestamp: '{}'
        genesis_block_identifier: null
    NetworkOptionsResponse:
      required:
      - allow
      - version
      type: object
      properties:
        version:
          $ref: '#/components/schemas/Version'
        allow:
          $ref: '#/components/schemas/Allow'
      description: |
        NetworkOptionsResponse contains information about the versioning of the
        node and the allowed operation statuses, operation types, and errors.
      example:
        allow: '{}'
        version: '{}'
    ConstructionMetadataRequest:
      required:
      - network_identifier
      type: object
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        options:
          type: object
          description: |
            Some blockchains require different metadata for different types of
            transaction construction (ex: delegation versus a transfer). Instead
            of requiring a blockchain node to return all possible types of
            metadata for construction (which may require multiple node fetches),
            the client can populate an options object to limit the metadata
            returned to only the subset required.
        public_keys:
          type: array
          items:
            $ref: '#/components/schemas/PublicKey'
      description: |
        A ConstructionMetadataRequest is utilized to get information required
        to construct a transaction.

        The Options object used to specify which metadata to return is left
        purposely unstructured to allow flexibility for implementers. Options
        is not required in the case that there is network-wide metadata of
        interest.

        Optionally, the request can also include an array
        of PublicKeys associated with the AccountIdentifiers
        returned in ConstructionPreprocessResponse.
    ConstructionMetadataResponse:
      required:
      - metadata
      type: object
      properties:
        metadata:
          type: object
          example:
            account_sequence: 23
            recent_block_hash: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
        suggested_fee:
          type: array
          items:
            $ref: '#/components/schemas/Amount'
      description: |
        The ConstructionMetadataResponse returns network-specific metadata
        used for transaction construction.

        Optionally, the implementer can return the suggested fee associated
        with the transaction being constructed. The caller may use this info
        to adjust the intent of the transaction or to create a transaction with
        a different account that can pay the suggested fee. Suggested fee is an array
        in case fee payment must occur in multiple currencies.
      example:
        metadata:
          account_sequence: 23
          recent_block_hash: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
        suggested_fee:
        - '{}'
        - '{}'
    ConstructionDeriveRequest:
      required:
      - network_identifier
      - public_key
      type: object
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        public_key:
          $ref: '#/components/schemas/PublicKey'
        metadata:
          type: object
      description: |
        ConstructionDeriveRequest is passed to the `/construction/derive`
        endpoint. Network is provided in the request because some blockchains
        have different address formats for different networks.
        Metadata is provided in the request because some blockchains
        allow for multiple address types (i.e. different address
        for validators vs normal accounts).
    ConstructionDeriveResponse:
      type: object
      properties:
        address:
          type: string
          description: |
            [DEPRECATED by `account_identifier` in `v1.4.4`] Address in network-specific format.
        account_identifier:
          $ref: '#/components/schemas/AccountIdentifier'
        metadata:
          type: object
      description: |
        ConstructionDeriveResponse is returned by the `/construction/derive`
        endpoint.
      example:
        metadata: {}
        address: address
        account_identifier: '{}'
    ConstructionPreprocessRequest:
      required:
      - network_identifier
      - operations
      type: object
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        operations:
          type: array
          items:
            $ref: '#/components/schemas/Operation'
        metadata:
          type: object
        max_fee:
          type: array
          items:
            $ref: '#/components/schemas/Amount'
        suggested_fee_multiplier:
          minimum: 0
          type: number
          format: double
      description: |
        ConstructionPreprocessRequest is passed to the `/construction/preprocess`
        endpoint so that a Rosetta implementation can determine which
        metadata it needs to request for construction.

        Metadata provided in this object should NEVER be a product
        of live data (i.e. the caller must follow some network-specific
        data fetching strategy outside of the Construction API to populate
        required Metadata). If live data is required for construction, it MUST
        be fetched in the call to `/construction/metadata`.

        The caller can provide a max fee they are willing
        to pay for a transaction. This is an array in the case fees
        must be paid in multiple currencies.

        The caller can also provide a suggested fee multiplier
        to indicate that the suggested fee should be scaled.
        This may be used to set higher fees for urgent transactions
        or to pay lower fees when there is less urgency. It is assumed
        that providing a very low multiplier (like 0.0001) will
        never lead to a transaction being created with a fee
        less than the minimum network fee (if applicable).

        In the case that the caller provides both a max fee
        and a suggested fee multiplier, the max fee will set an
        upper bound on the suggested fee (regardless of the
        multiplier provided).
    ConstructionPreprocessResponse:
      type: object
      properties:
        options:
          type: object
          description: |
            The options that will be sent directly to `/construction/metadata` by
            the caller.
        required_public_keys:
          type: array
          items:
            $ref: '#/components/schemas/AccountIdentifier'
      description: "ConstructionPreprocessResponse contains `options` that will\n\
        be sent unmodified to `/construction/metadata`. If it is\nnot necessary to\
        \ make a request to `/construction/metadata`,\n`options` should be omitted.\
        \ \n\nSome blockchains require the PublicKey of particular AccountIdentifiers\n\
        to construct a valid transaction. To fetch these PublicKeys, populate\n`required_public_keys`\
        \ with the AccountIdentifiers associated with the desired\nPublicKeys. If\
        \ it is not necessary to retrieve any PublicKeys\nfor construction, `required_public_keys`\
        \ should be omitted.\n"
      example:
        options: {}
        required_public_keys:
        - '{}'
        - '{}'
    ConstructionPayloadsRequest:
      required:
      - network_identifier
      - operations
      type: object
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        operations:
          type: array
          items:
            $ref: '#/components/schemas/Operation'
        metadata:
          type: object
        public_keys:
          type: array
          items:
            $ref: '#/components/schemas/PublicKey'
      description: |
        ConstructionPayloadsRequest is the request to
        `/construction/payloads`. It contains the network,
        a slice of operations, and arbitrary metadata
        that was returned by the call to `/construction/metadata`.

        Optionally, the request can also include an array
        of PublicKeys associated with the AccountIdentifiers
        returned in ConstructionPreprocessResponse.
    ConstructionPayloadsResponse:
      required:
      - payloads
      - unsigned_transaction
      type: object
      properties:
        unsigned_transaction:
          type: string
        payloads:
          type: array
          items:
            $ref: '#/components/schemas/SigningPayload'
      description: |
        ConstructionTransactionResponse is returned by `/construction/payloads`. It
        contains an unsigned transaction blob (that is usually needed to construct
        the a network transaction from a collection of signatures) and an
        array of payloads that must be signed by the caller.
      example:
        unsigned_transaction: unsigned_transaction
        payloads:
        - '{}'
        - '{}'
    ConstructionCombineRequest:
      required:
      - network_identifier
      - signatures
      - unsigned_transaction
      type: object
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        unsigned_transaction:
          type: string
        signatures:
          type: array
          items:
            $ref: '#/components/schemas/Signature'
      description: |
        ConstructionCombineRequest is the input to the `/construction/combine`
        endpoint. It contains the unsigned transaction blob returned by
        `/construction/payloads` and all required signatures to create
        a network transaction.
    ConstructionCombineResponse:
      required:
      - signed_transaction
      type: object
      properties:
        signed_transaction:
          type: string
      description: |
        ConstructionCombineResponse is returned by `/construction/combine`.
        The network payload will be sent directly to the
        `construction/submit` endpoint.
      example:
        signed_transaction: signed_transaction
    ConstructionParseRequest:
      required:
      - network_identifier
      - signed
      - transaction
      type: object
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        signed:
          type: boolean
          description: |
            Signed is a boolean indicating whether the transaction is signed.
        transaction:
          type: string
          description: |
            This must be either the unsigned transaction blob returned by
            `/construction/payloads` or the signed transaction blob
            returned by `/construction/combine`.
      description: |
        ConstructionParseRequest is the input to the `/construction/parse`
        endpoint. It allows the caller to parse either an unsigned or
        signed transaction.
    ConstructionParseResponse:
      required:
      - operations
      type: object
      properties:
        operations:
          type: array
          items:
            $ref: '#/components/schemas/Operation'
        signers:
          type: array
          description: |
            [DEPRECATED by `account_identifier_signers` in `v1.4.4`] All signers (addresses) of a particular transaction. If the transaction
            is unsigned, it should be empty.
          items:
            type: string
        account_identifier_signers:
          type: array
          items:
            $ref: '#/components/schemas/AccountIdentifier'
        metadata:
          type: object
      description: |
        ConstructionParseResponse contains an array of operations that occur in
        a transaction blob. This should match the array of operations provided
        to `/construction/preprocess` and `/construction/payloads`.
      example:
        signers:
        - signers
        - signers
        metadata: {}
        operations:
        - '{}'
        - '{}'
        account_identifier_signers:
        - '{}'
        - '{}'
    ConstructionHashRequest:
      required:
      - network_identifier
      - signed_transaction
      type: object
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        signed_transaction:
          type: string
      description: |
        ConstructionHashRequest is the input to the `/construction/hash` endpoint.
    ConstructionSubmitRequest:
      required:
      - network_identifier
      - signed_transaction
      type: object
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        signed_transaction:
          type: string
      description: |
        The transaction submission request includes a signed transaction.
    TransactionIdentifierResponse:
      required:
      - transaction_identifier
      type: object
      properties:
        transaction_identifier:
          $ref: '#/components/schemas/TransactionIdentifier'
        metadata:
          type: object
      description: |
        TransactionIdentifierResponse contains the transaction_identifier of a
        transaction that was submitted to either `/construction/hash` or
        `/construction/submit`.
      example:
        metadata: {}
        transaction_identifier: '{}'
    CallRequest:
      required:
      - method
      - network_identifier
      - parameters
      type: object
      properties:
        network_identifier:
          $ref: '#/components/schemas/NetworkIdentifier'
        method:
          type: string
          description: |
            Method is some network-specific procedure call. This method could
            map to a network-specific RPC endpoint, a method in an SDK generated
            from a smart contract, or some hybrid of the two.

            The implementation must define all available methods in the
            Allow object. However, it is up to the caller to determine
            which parameters to provide when invoking `/call`.
          example: eth_call
        parameters:
          type: object
          description: |
            Parameters is some network-specific argument for a method. It is
            up to the caller to determine which parameters to provide when invoking
            `/call`.
          example:
            block_number: 23
            address: 0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
      description: |
        CallRequest is the input to the `/call` endpoint.
    CallResponse:
      required:
      - idempotent
      - result
      type: object
      properties:
        result:
          type: object
          description: |
            Result contains the result of the `/call` invocation. This result
            will not be inspected or interpreted by Rosetta tooling and is
            left to the caller to decode.
          example:
            count: 1000
        idempotent:
          type: boolean
          description: |
            Idempotent indicates that if `/call` is invoked with the same
            CallRequest again, at any point in time, it will return the same
            CallResponse.

            Integrators may cache the CallResponse if this is set to true
            to avoid making unnecessary calls to the Rosetta implementation. For
            this reason, implementers should be very conservative about returning
            true here or they could cause issues for the caller.
      description: |
        CallResponse contains the result of a `/call` invocation.
      example:
        result:
          count: 1000
        idempotent: true
    Error:
      $ref: ./models/Error.yaml
